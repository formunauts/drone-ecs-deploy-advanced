#!/usr/bin/env bash

AWS_CLI=$(which aws)
ECS_CLI="$AWS_CLI --output json ecs"
SSM_CLI="$AWS_CLI --output json ssm"

CLUSTER=false
SERVICE=false
COMMAND=false
WAIT=false
EXEC=false
IMAGE="latest"
TASK_DEFINITION=false
MAX_DEFINITIONS=2
NEW_DEF=false
TIMEOUT=90
DEBUG=""

function getCurrentTaskDefinition() {
  echo "Getting current task definition..."

  if [ $SERVICE != false ]; then
    service_task_definition_arn=$($ECS_CLI describe-services $DEBUG --services $SERVICE --cluster $CLUSTER | jq -r .services[0].taskDefinition)
    task_definition_family=$($ECS_CLI describe-task-definition $DEBUG --task-def $service_task_definition_arn | jq -r .taskDefinition.family)

    TASK_DEFINITION_ARN=$($ECS_CLI describe-task-definition $DEBUG --task-def $task_definition_family | jq -r .taskDefinition.taskDefinitionArn)
  elif [ $TASK_DEFINITION != false ]; then
    TASK_DEFINITION_ARN=$($ECS_CLI describe-task-definition $DEBUG --task-def $TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn)
  fi

  TASK_DEFINITION=$($ECS_CLI describe-task-definition $DEBUG --task-def $TASK_DEFINITION_ARN)

  echo "Done getting current task definition..."
}

function taskDefinitionJson() {
  echo "Parsing task definition JSON..."

  old_image=$(echo "$TASK_DEFINITION" | jq -r '.taskDefinition.containerDefinitions[0].image')

  if [ $old_image == $IMAGE ]; then
    return
  fi

  new_definition=$(echo "$TASK_DEFINITION" | jq '.taskDefinition')

  filter="family: .family, volumes: .volumes, containerDefinitions: (.containerDefinitions | map(. + { image: \"${IMAGE}\" }))"

  conditionals=(networkMode executionRoleArn taskRoleArn placementConstraints)
  for conditional in "${conditionals[@]}"; do
    re=".*${conditional}.*"
    if [[ "$new_definition" =~ $re ]]; then
    filter="${filter}, ${conditional}: .${conditional}"
    fi
  done

  # AWS Fargate
  compatibilities=$(echo "${new_definition}" | jq -r '. | select(.requiresCompatibilities != null) | .requiresCompatibilities[]')
  if [[ "${compatibilities}" == 'FARGATE' ]]; then
    fargate_filter='requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory'
    filter="${filter}, ${fargate_filter}"
  fi

  NEW_DEF=$(echo "$new_definition" | jq "{${filter}}")
  echo "Done parsing task definition JSON..."
}

function registerNewTaskDefinition() {
  echo "Registering new task definition..."

  TASK_DEFINITION_ARN=$($ECS_CLI register-task-definition $DEBUG --cli-input-json "$NEW_DEF" \
                        | jq -r '.taskDefinition.taskDefinitionArn')

  if [[ $MAX_DEFINITIONS -gt 0 ]]; then
    family_prefix=${TASK_DEFINITION_ARN##*:task-definition/}
    family_prefix=${family_prefix%*:[0-9]*}
    task_revisions=$($ECS_CLI list-task-definitions $DEBUG \
                     --family-prefix $family_prefix \
                     --status ACTIVE \
                     --sort ASC)
    active_revisions=$(echo "$task_revisions" | jq '.taskDefinitionArns | length')

    if [[ $active_revisions -gt $MAX_DEFINITIONS ]]; then
      last_outdated_index=$(($active_revisions - $MAX_DEFINITIONS - 1))
      for i in $(seq 0 $last_outdated_index); do
        outdated_revision=$(echo "$task_revisions" | jq -r ".taskDefinitionArns[$i]")
        echo "Deregistering outdated task revision: $outdated_revision"

        $ECS_CLI deregister-task-definition $DEBUG --task-definition "$outdated_revision" > /dev/null
      done
    fi
  fi

  echo "Done registering new task definition..."
}

function updateTaskDefinition() {
  echo "Updating task definition..."

  taskDefinitionJson

  if [[ $NEW_DEF != false ]]; then
    registerNewTaskDefinition

    TASK_DEFINITION=$NEW_DEF
  fi

  echo "Done updating task definition..."
}

function deployService() {
  printf "Deploying service %s to %s...\n" $SERVICE $CLUSTER

  $ECS_CLI update-service $DEBUG \
    --cluster $CLUSTER \
    --service $SERVICE \
    --task-definition $TASK_DEFINITION_ARN \
    --force-new-deployment

  printf "Done deploying service %s to %s...\n" $SERVICE $CLUSTER
}

waitForSSMCommand() {
  every=2
  count=0

  while [ $count -lt $TIMEOUT ]; do
    details=$($SSM_CLI list-command-invocations --command-id "$SSM_COMMAND_ID" --details)
    COMMAND_OUTPUT=$(echo "$details" | jq -r '.CommandInvocations[].CommandPlugins[].Output')
    COMMAND_EXIT_CODE=$(echo "$details" | jq -r '.CommandInvocations[].CommandPlugins[].ResponseCode')
    if [ $COMMAND_EXIT_CODE -gt -1 ]; then
      break
    else
      sleep $every
      count=$(($count + $every))
    fi
  done
}

execCommand() {
  printf "Executing command '%s' in service %s of %s...\n" "$COMMAND" $SERVICE $CLUSTER

  EXEC_SUCCESS=false

  current_task_arns="$(
    $ECS_CLI list-tasks $DEBUG \
      --cluster "$CLUSTER" \
      --family "$SERVICE" \
      --query 'taskArns' |
      jq -r '.[]'
  )"
  container_instances="$(
    $ECS_CLI describe-tasks $DEBUG \
      --cluster "$CLUSTER" \
      --tasks $current_task_arns \
      --query 'tasks[*].containerInstanceArn' |
      jq -r '.[]'
  )"
  for container in $container_instances; do
    EC2_INSTANCE_ID=$(
      $ECS_CLI describe-container-instances $DEBUG \
        --cluster "$CLUSTER" \
        --container-instances "$container" \
        --region eu-central-1 \
        --query 'containerInstances[*].ec2InstanceId' |
        jq -r '.[]'
    )
    SSM_COMMAND_ID=$($SSM_CLI send-command $DEBUG \
                     --instance-ids "$EC2_INSTANCE_ID" \
                     --document-name 'AWS-RunShellScript' \
                     --parameters '{"commands": ["sudo docker ps --filter name='"$SERVICE"'"]}' |
                     jq -r '.Command.CommandId')
    waitForSSMCommand
    if [ $COMMAND_EXIT_CODE -gt 0 ]; then
      continue
    fi
    container_id=$(echo $COMMAND_OUTPUT | cut -d ' ' -f 9)

    printf "Executing in docker container %s of EC2 instance %s...\n" $container_id $EC2_INSTANCE_ID

    SSM_COMMAND_ID=$($SSM_CLI send-command $DEBUG \
                     --instance-ids "$EC2_INSTANCE_ID" \
                     --document-name 'AWS-RunShellScript' \
                     --parameters '{"commands": ["sudo docker exec '"$container_id"' '"$COMMAND"'"]}' |
                     jq -r '.Command.CommandId')
    waitForSSMCommand
    if [ $COMMAND_EXIT_CODE -eq 0 ]; then
      echo "----------------------------------------"
      echo "$COMMAND_OUTPUT"
      echo "----------------------------------------"
      EXEC_SUCCESS=true
      printf "Done executing command '%s'...\n" "$COMMAND"
    fi
    break
  done

  if [[ "${EXEC_SUCCESS}" != "true" ]]; then
    echo "No Docker container was found for executing the command!"
    echo "Aborting!"
    exit 1
  fi
}

function runTask() {
  printf "Running task %s on %s...\n" $TASK_DEFINITION_ARN $CLUSTER
  
  override_filters="containerOverrides: (.containerDefinitions | map({ name: .name, command: [\"${COMMAND}\"] })), taskRoleArn: .taskRoleArn, executionRoleArn: .executionRoleArn"
  
  if [[ $DEBUG != "" ]]; then
    printf "JQ command: .taskDefinition | {%s}\n" $override_filters 
  fi
  
  overrides=$(echo "$TASK_DEFINITION" | jq ".taskDefinition | {$override_filters}")

  if [[ $DEBUG != "" ]]; then
    printf "Using overrides: %s\n" $overrides
  fi

  task=$($ECS_CLI run-task $DEBUG \
    --cluster $CLUSTER \
    --task-definition $TASK_DEFINITION_ARN \
    --overrides "$overrides")

  printf "$task\n"

  TASK_ARN=$(echo "$task" | jq -r ".tasks[0].taskArn")

  printf "Done running task %s on %s...\n" $TASK_DEFINITION_ARN $CLUSTER
}

function waitForTask() {
  printf "Waiting for task %s on %s to finish..." $TASK_ARN $CLUSTER

  every=2
  count=0

  while [ $count -lt $TIMEOUT ]; do
    task=$($ECS_CLI describe-tasks $DEBUG \
      --cluster $CLUSTER \
      --tasks $TASK_ARN)
    LAST_STATUS=$(echo "$task" | jq -r ".tasks[0].lastStatus")
    if [ $LAST_STATUS == "STOPPED" ]; then
      echo "Done waiting for task to finish..."
      EXIT_CODE=$(echo $task | jq -r ".tasks[0].containers[0].exitCode")
      if [ $EXIT_CODE -eq 0 ]; then
        echo "Task finished successfully!"
        count=$TIMEOUT
      else
        echo "Task not successful!"
        echo "Aborting!"
        exit 1
      fi
    else
      sleep $every
      count=$(($count + $every))
    fi
  done
}

function waitForDeployment() {
  echo "Waiting for service deployment to finish..."

  DEPLOYMENT_SUCCESS=false
  every=2
  count=0

  while [ $count -lt $TIMEOUT ]; do
    NUM_DEPLOYMENTS=$($ECS_CLI describe-services $DEBUG \
                      --services $SERVICE \
                      --cluster $CLUSTER \
                      | jq "[.services[].deployments[]] | length")

    if [ $NUM_DEPLOYMENTS -eq 1 ]; then
      echo "Done waiting for service deployment to finish..."
      echo "Service deployment finished successfully!"
      DEPLOYMENT_SUCCESS="true"
      count=$TIMEOUT
    else
      sleep $every
      count=$(($count + $every))
    fi
  done

  if [[ "${DEPLOYMENT_SUCCESS}" != "true" ]]; then
    echo "Done waiting for service deployment to finish..."
    printf "Number of deployments: %s" $NUM_DEPLOYMENTS
    echo "Service deployment not successful!"
    echo "Aborting!"
    exit 1
  fi
}

#
# Run the script
#
set -o errexit
set -o pipefail
set -u
set -e

if [ $# == 0 ]; then exit 2; fi

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -c|--cluster)
    CLUSTER="$2"
    shift
    ;;
    -i|--image)
    IMAGE="$2"
    shift
    ;;
    -s|--service)
    SERVICE="$2"
    shift
    ;;
    -C|--command)
    COMMAND="$2"
    shift
    ;;
    -w | --wait)
    WAIT=true
    ;;
    -e | --exec)
    EXEC=true
    ;;
    -d|--task-definition)
    TASK_DEFINITION="$2"
    shift
    ;;
    -t|--timeout)
    TIMEOUT="$2"
    shift
    ;;
    -r|--region)
    ECS_CLI="$ECS_CLI --region $2"
    shift
    ;;
    --debug)
    DEBUG="--debug"
    ;;
    *)
    echo "unknown argument: ${key}"
    exit 2
    ;;
  esac
  shift # past argument or value
done

echo "---"
printf "Starting deployment of %s to ECS...\n" $SERVICE 

if [[ $SERVICE != false && "$COMMAND" != false && $EXEC != false ]]; then
  execCommand
else
  getCurrentTaskDefinition
  printf "Current task definition ARN: %s\n" $TASK_DEFINITION_ARN

  updateTaskDefinition
  printf "New task definition ARN: %s\n" $TASK_DEFINITION_ARN

  if [ $SERVICE == false ]; then
    if [[ "$COMMAND" != false ]]; then
      runTask
      if [[ $WAIT != false ]]; then
        waitForTask
      fi
    fi
  else
    deployService
    waitForDeployment
  fi
fi

printf "Everything done for %s. Have a nice day! \n" $SERVICE

exit 0
